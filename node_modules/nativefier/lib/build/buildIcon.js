"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertIconIfNecessary = void 0;
const path = require("path");
const log = require("loglevel");
const helpers_1 = require("../helpers/helpers");
const iconShellHelpers_1 = require("../helpers/iconShellHelpers");
function iconIsIco(iconPath) {
    return path.extname(iconPath) === '.ico';
}
function iconIsPng(iconPath) {
    return path.extname(iconPath) === '.png';
}
function iconIsIcns(iconPath) {
    return path.extname(iconPath) === '.icns';
}
/**
 * Will convert a `.png` icon to the appropriate arch format (if necessary),
 * and return adjusted options
 */
async function convertIconIfNecessary(options) {
    if (!options.packager.icon) {
        log.debug('Option "icon" not set, skipping icon conversion.');
        return;
    }
    if (options.packager.platform === 'win32') {
        if (iconIsIco(options.packager.icon)) {
            log.debug('Building for Windows and icon is already a .ico, no conversion needed');
            return;
        }
        try {
            const iconPath = await iconShellHelpers_1.convertToIco(options.packager.icon);
            options.packager.icon = iconPath;
            return;
        }
        catch (error) {
            log.warn('Failed to convert icon to .ico, skipping.', error);
            return;
        }
    }
    if (options.packager.platform === 'linux') {
        if (iconIsPng(options.packager.icon)) {
            log.debug('Building for Linux and icon is already a .png, no conversion needed');
            return;
        }
        try {
            const iconPath = await iconShellHelpers_1.convertToPng(options.packager.icon);
            options.packager.icon = iconPath;
            return;
        }
        catch (error) {
            log.warn('Failed to convert icon to .png, skipping.', error);
            return;
        }
    }
    if (iconIsIcns(options.packager.icon)) {
        log.debug('Building for macOS and icon is already a .icns, no conversion needed');
        return;
    }
    if (!helpers_1.isOSX()) {
        log.warn('Skipping icon conversion to .icns, conversion is only supported on macOS');
        return;
    }
    try {
        const iconPath = await iconShellHelpers_1.convertToIcns(options.packager.icon);
        options.packager.icon = iconPath;
        return;
    }
    catch (error) {
        log.warn('Failed to convert icon to .icns, skipping.', error);
        options.packager.icon = undefined;
        return;
    }
}
exports.convertIconIfNecessary = convertIconIfNecessary;
//# sourceMappingURL=buildIcon.js.map